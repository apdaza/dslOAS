/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.guioas.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.guioas.guiOas.Campo;
import org.xtext.example.guioas.guiOas.Entidad;
import org.xtext.example.guioas.guiOas.GuiOasPackage;
import org.xtext.example.guioas.guiOas.Validador;
import org.xtext.example.guioas.services.GuiOasGrammarAccess;

@SuppressWarnings("all")
public class GuiOasSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GuiOasGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GuiOasPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GuiOasPackage.CAMPO:
				sequence_Campo(context, (Campo) semanticObject); 
				return; 
			case GuiOasPackage.ENTIDAD:
				sequence_Entidad(context, (Entidad) semanticObject); 
				return; 
			case GuiOasPackage.VALIDADOR:
				sequence_Validador(context, (Validador) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Campo returns Campo
	 *
	 * Constraint:
	 *     (name=ID nombre=STRING tipo=STRING longitud=INT)
	 */
	protected void sequence_Campo(ISerializationContext context, Campo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GuiOasPackage.Literals.CAMPO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GuiOasPackage.Literals.CAMPO__NAME));
			if (transientValues.isValueTransient(semanticObject, GuiOasPackage.Literals.CAMPO__NOMBRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GuiOasPackage.Literals.CAMPO__NOMBRE));
			if (transientValues.isValueTransient(semanticObject, GuiOasPackage.Literals.CAMPO__TIPO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GuiOasPackage.Literals.CAMPO__TIPO));
			if (transientValues.isValueTransient(semanticObject, GuiOasPackage.Literals.CAMPO__LONGITUD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GuiOasPackage.Literals.CAMPO__LONGITUD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCampoAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCampoAccess().getNombreSTRINGTerminalRuleCall_2_0(), semanticObject.getNombre());
		feeder.accept(grammarAccess.getCampoAccess().getTipoSTRINGTerminalRuleCall_3_0(), semanticObject.getTipo());
		feeder.accept(grammarAccess.getCampoAccess().getLongitudINTTerminalRuleCall_4_0(), semanticObject.getLongitud());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Entidad returns Entidad
	 *
	 * Constraint:
	 *     (nombre=STRING campos+=Campo* entidades+=Entidad*)
	 */
	protected void sequence_Entidad(ISerializationContext context, Entidad semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Validador returns Validador
	 *
	 * Constraint:
	 *     (name=ID nombre=STRING locacion=URL)
	 */
	protected void sequence_Validador(ISerializationContext context, Validador semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GuiOasPackage.Literals.VALIDADOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GuiOasPackage.Literals.VALIDADOR__NAME));
			if (transientValues.isValueTransient(semanticObject, GuiOasPackage.Literals.VALIDADOR__NOMBRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GuiOasPackage.Literals.VALIDADOR__NOMBRE));
			if (transientValues.isValueTransient(semanticObject, GuiOasPackage.Literals.VALIDADOR__LOCACION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GuiOasPackage.Literals.VALIDADOR__LOCACION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValidadorAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getValidadorAccess().getNombreSTRINGTerminalRuleCall_2_0(), semanticObject.getNombre());
		feeder.accept(grammarAccess.getValidadorAccess().getLocacionURLTerminalRuleCall_3_0(), semanticObject.getLocacion());
		feeder.finish();
	}
	
	
}
